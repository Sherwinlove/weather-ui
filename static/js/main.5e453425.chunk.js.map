{"version":3,"sources":["components/WeatherBlock/WeatherBlock.js","components/DateDisplay/DateDisplay.js","components/Location/Location.js","components/UnitToggle/UnitToggle.js","App.js","serviceWorker.js","index.js"],"names":["WeatherBlockContainer","styled","ul","WeatherDay","li","DayString","div","TempString","ConditionString","WeatherBlock","days","isMetric","map","day","date","moment","unix","dt","format","Math","round","temp","weather","main","DateDisplayContainer","DayContainer","DateContainer","DateDisplay","LocationContainer","Location","ToggleContainer","UnitToggle","setIsMetric","defaultChecked","icons","onChange","AppContainer","AppInner","Header","App","useState","setIsLoaded","forecastDays","setForecastDays","useEffect","fetch","then","res","json","result","console","log","forecast","daily","pop","catch","err","currentDate","length","Date","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"ouCAIA,IAAMA,EAAwBC,IAAOC,GAAV,KAOrBC,EAAaF,IAAOG,GAAV,KAuBVC,EAAYJ,IAAOK,IAAV,KAKTC,EAAaN,IAAOK,IAAV,KAMVE,EAAkBP,IAAOK,IAAV,KA6BNG,EAxBM,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC5B,OACE,kBAACX,EAAD,KACGU,EAAKE,KAAI,SAACC,GACT,IAAMC,EAAOC,IAAOC,KAAKH,EAAII,IAAIC,OAAO,QACxC,OACE,kBAACf,EAAD,KACE,kBAACE,EAAD,KAAYS,GACZ,kBAACP,EAAD,KACGY,KAAKC,MAAMP,EAAIQ,KAAKR,KACpBF,EAAW,QAAO,SAErB,kBAACH,EAAD,KAAkBK,EAAIS,QAAQ,GAAGC,Y,6XC1D7C,IAAMC,EAAuBvB,IAAOK,IAAV,KAMpBmB,EAAexB,IAAOK,IAAV,KAMZoB,EAAgBzB,IAAOK,IAAV,KAcJqB,EATK,SAAC,GAAc,IAAZb,EAAW,EAAXA,KACrB,OACE,kBAACU,EAAD,KACE,kBAACC,EAAD,KAAeV,IAAOC,KAAKF,GAAMI,OAAO,SACxC,kBAACQ,EAAD,KAAgBX,IAAOC,KAAKF,GAAMI,OAAO,c,qICtB/C,IAAMU,EAAoB3B,IAAOK,IAAV,KAURuB,EAJE,WACf,OAAO,kBAACD,EAAD,yB,4nGCNT,IAAME,EAAkB7B,IAAOK,IAAV,KAyJNyB,EAdI,SAAC,GAA+B,IAA7BpB,EAA4B,EAA5BA,SAAUqB,EAAkB,EAAlBA,YAK9B,OACE,kBAACF,EAAD,KACE,uCACA,kBAAC,IAAD,CAAQG,eAAgBtB,EAAUuB,OAAO,EAAOC,SAPnC,WACfH,GAAarB,MAOX,yC,uaC/IN,IAAMyB,EAAenC,IAAOK,IAAV,KASZ+B,EAAWpC,IAAOK,IAAV,KAIRgC,EAASrC,IAAOK,IAAV,KAiDGiC,EA5CH,WAAO,IAAD,EACgBC,oBAAS,GADzB,mBACCC,GADD,aAEwBD,mBAAS,IAFjC,mBAETE,EAFS,KAEKC,EAFL,OAGgBH,oBAAS,GAHzB,mBAGT7B,EAHS,KAGCqB,EAHD,KAyBhBY,qBAAU,WAlBRC,MAAM,+EAAD,OAEDlC,EAAW,SAAW,WAFrB,gDADU,qCAMZmC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLC,QAAQC,IAAIF,GACZ,IAAMG,EAAWH,EAAOI,MACxBD,EAASE,MACTX,EAAgBS,GAChBX,GAAY,MAEbc,OAAM,SAACC,GACNN,QAAQC,IAAIK,QAMf,CAAC7C,IAEJ,IAAM8C,EAAcf,EAAagB,OAAShB,EAAa,GAAGzB,GAAK,IAAI0C,KACnE,OACE,kBAACvB,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,KACE,kBAAC,EAAD,CAAaxB,KAAM2C,IACnB,kBAAC,EAAD,CAAY9C,SAAUA,EAAUqB,YAAaA,KAE/C,kBAAC,EAAD,MACA,kBAAC,EAAD,CAActB,KAAMgC,EAAc/B,SAAUA,OCrDhCiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdnB,OAAM,SAAAoB,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.5e453425.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\n\nconst WeatherBlockContainer = styled.ul`\n  display: flex;\n  border-top: 2px solid #c1c1c1;\n  border-bottom: 2px solid #c1c1c1;\n  padding: 32px 0;\n`;\n\nconst WeatherDay = styled.li`\n  &:not(:last-child) {\n    border-right: 1px solid #c1c1c1;\n  }\n  width: 140px;\n  height: 180px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding: 20px;\n  list-style: none;\n  position: relative;\n  img {\n    position: absolute;\n    bottom: -25px;\n    right: 0px;\n    display: block;\n    width: 100px;\n    height: 100px;\n    opacity: 0.5;\n  }\n`;\n\nconst DayString = styled.div`\n  color: gray;\n  font-weight: 700;\n`;\n\nconst TempString = styled.div`\n  font-size: 48px;\n  font-weight: 100;\n  padding: 15px 0;\n`;\n\nconst ConditionString = styled.div`\n  font-weight: 100;\n`;\n\n// const day = day.dt_txt.substr\nconst WeatherBlock = ({ days, isMetric }) => {\n  return (\n    <WeatherBlockContainer>\n      {days.map((day) => {\n        const date = moment.unix(day.dt).format(\"dddd\");\n        return (\n          <WeatherDay>\n            <DayString>{date}</DayString>\n            <TempString>\n              {Math.round(day.temp.day)}\n              {isMetric ? \"°C\" : \"°F\"}\n            </TempString>\n            <ConditionString>{day.weather[0].main}</ConditionString>\n            {/* <img\n              alt=\"weather icon\"\n              src={`https://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png`}\n            /> */}\n          </WeatherDay>\n        );\n      })}\n    </WeatherBlockContainer>\n  );\n};\n\nexport default WeatherBlock;\n//    ¯\\_(ツ)_/¯ :3\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\n\nconst DateDisplayContainer = styled.div`\n  text-align: left;\n  display: flex;\n  flex-direction: row;\n`;\n\nconst DayContainer = styled.div`\n  font-size: 36px;\n  font-weight: 700;\n  padding-right: 8px;\n`;\n\nconst DateContainer = styled.div`\n  font-size: 36px;\n  font-weight: 200;\n`;\n\nconst DateDisplay = ({ date }) => {\n  return (\n    <DateDisplayContainer>\n      <DayContainer>{moment.unix(date).format(\"dddd\")}</DayContainer>\n      <DateContainer>{moment.unix(date).format(\"MMMM DD\")}</DateContainer>\n    </DateDisplayContainer>\n  );\n};\n\nexport default DateDisplay;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst LocationContainer = styled.div`\n  text-align: left;\n  font-size: 84px;\n  font-weight: 100;\n`;\n\nconst Location = () => {\n  return <LocationContainer>Los Angeles, CA</LocationContainer>;\n};\n\nexport default Location;\n","import React from \"react\";\nimport Toggle from \"react-toggle\";\nimport styled from \"styled-components\";\n\nconst ToggleContainer = styled.div`\n  display: flex;\n  align-items: center;\n  .react-toggle {\n    opacity: 0.5;\n    &:hover {\n      opacity: 1;\n    }\n    touch-action: pan-x;\n    margin: 0 10px;\n    display: inline-block;\n    position: relative;\n    cursor: pointer;\n    background-color: transparent;\n    border: 0;\n    padding: 0;\n\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n    -webkit-tap-highlight-color: transparent;\n    transition: 0.4s ease-in-out;\n  }\n\n  .react-toggle-screenreader-only {\n    border: 0;\n    clip: rect(0 0 0 0);\n    height: 1px;\n    margin: -1px;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    width: 1px;\n  }\n\n  .react-toggle--disabled {\n    cursor: not-allowed;\n    opacity: 0.5;\n    -webkit-transition: opacity 0.25s;\n    transition: opacity 0.25s;\n  }\n\n  .react-toggle-track {\n    width: 50px;\n    height: 18px;\n    padding: 0;\n    border-radius: 30px;\n    border: 1px solid #4d4d4d;\n    -webkit-transition: all 0.2s ease;\n    -moz-transition: all 0.2s ease;\n    transition: all 0.2s ease;\n  }\n\n  /* .react-toggle:hover:not(.react-toggle--disabled) .react-toggle-track {\n    border: 1px solid #e8e8e8;\n  } */\n\n  .react-toggle--checked .react-toggle-track {\n    border: 1px solid #4d4d4d;\n  }\n\n  /* .react-toggle--checked:hover:not(.react-toggle--disabled)\n    .react-toggle-track {\n    border: 1px solid #4d4d4d;\n  } */\n\n  .react-toggle-track-check {\n    position: absolute;\n    width: 14px;\n    height: 10px;\n    top: 0px;\n    bottom: 0px;\n    margin-top: auto;\n    margin-bottom: auto;\n    line-height: 0;\n    left: 8px;\n    opacity: 0;\n    -webkit-transition: opacity 0.25s ease;\n    -moz-transition: opacity 0.25s ease;\n    transition: opacity 0.25s ease;\n  }\n\n  .react-toggle--checked .react-toggle-track-check {\n    opacity: 1;\n    -webkit-transition: opacity 0.25s ease;\n    -moz-transition: opacity 0.25s ease;\n    transition: opacity 0.25s ease;\n  }\n\n  .react-toggle-track-x {\n    position: absolute;\n    width: 10px;\n    height: 10px;\n    top: 0px;\n    bottom: 0px;\n    margin-top: auto;\n    margin-bottom: auto;\n    line-height: 0;\n    right: 10px;\n    opacity: 1;\n    -webkit-transition: opacity 0.25s ease;\n    -moz-transition: opacity 0.25s ease;\n    transition: opacity 0.25s ease;\n  }\n\n  .react-toggle--checked .react-toggle-track-x {\n    opacity: 0;\n  }\n\n  .react-toggle-thumb {\n    position: absolute;\n    top: 2px;\n    left: 3px;\n    width: 24px;\n    height: 16px;\n    border: 1px solid #4d4d4d;\n    border-radius: 10px;\n    background-color: #4d4d4d;\n\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    box-sizing: border-box;\n\n    -webkit-transition: all 0.25s ease;\n    -moz-transition: all 0.25s ease;\n    transition: all 0.25s ease;\n  }\n\n  .react-toggle--checked .react-toggle-thumb {\n    left: 25px;\n    border-color: #4d4d4d;\n  }\n`;\n\nconst UnitToggle = ({ isMetric, setIsMetric }) => {\n  const onToggle = () => {\n    setIsMetric(!isMetric);\n  };\n\n  return (\n    <ToggleContainer>\n      <span>°F</span>\n      <Toggle defaultChecked={isMetric} icons={false} onChange={onToggle} />\n      <span>°C</span>\n    </ToggleContainer>\n  );\n};\n//    ¯\\_(ツ)_/¯    \"that's what\" - she\nexport default UnitToggle;\n","import React, { useState, useEffect } from \"react\";\nimport WeatherBlock from \"./components/WeatherBlock/WeatherBlock\";\nimport DateDisplay from \"./components/DateDisplay/DateDisplay\";\nimport Location from \"./components/Location/Location\";\nimport UnitToggle from \"./components/UnitToggle/UnitToggle\";\n\nimport styled from \"styled-components\";\nimport \"./App.css\";\n\nconst AppContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nconst AppInner = styled.div`\n  margin: 0 auto;\n`;\n\nconst Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst App = () => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [forecastDays, setForecastDays] = useState([]);\n  const [isMetric, setIsMetric] = useState(true);\n\n  const getForecast = () => {\n    const apiKey = \"b21784b6712e0a0a389a578994415f1f\";\n    fetch(\n      `https://api.openweathermap.org/data/2.5/onecall?lat=34.11&lon=-118.19&units=${\n        isMetric ? \"metric\" : \"imperial\"\n      }&exclude=hourly,minutely&cnt=7&appid=${apiKey}`\n    )\n      .then((res) => res.json())\n      .then((result) => {\n        console.log(result);\n        const forecast = result.daily;\n        forecast.pop();\n        setForecastDays(forecast);\n        setIsLoaded(true);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  useEffect(() => {\n    getForecast();\n  }, [isMetric]);\n\n  const currentDate = forecastDays.length ? forecastDays[0].dt : new Date();\n  return (\n    <AppContainer>\n      <AppInner>\n        <Header>\n          <DateDisplay date={currentDate} />\n          <UnitToggle isMetric={isMetric} setIsMetric={setIsMetric} />\n        </Header>\n        <Location />\n        <WeatherBlock days={forecastDays} isMetric={isMetric} />\n      </AppInner>\n    </AppContainer>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}